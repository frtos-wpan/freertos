#
# Shared/STM32/Makefile.stm32 - Build FreeRTOS for an STM32
#
# Developed by Werner Almesberger for Actility S.A., and
# licensed under LGPLv2 by Actility S.A.
#

#
# Required input variables:
#
# NAME		name of the executable
# CHIP_FAMILY	chip family. Currently either STM32F2xx or STM32F4xx
# SRC		C source files
# PLL_ARGS	arguments for PLL configuration (see pll/pll.c):
#		[-u] src_MHz [min_MHz [max_MHz]]
#
# Optional input variables:
#
# CFLAGS	user CFLAGS (-Wall, -O, etc.)
#

# Shell must be bash for $PIPESTATUS used in the MKDEP macro.
SHELL = /bin/bash

ARCH = arm-none-eabi
CC = $(ARCH)-gcc
OBJCOPY = $(ARCH)-objcopy

# Path from the platform build directories.
FREERTOS ?= $(shell pwd)/../../..


#----- Chip-specific settings -------------------------------------------------


#
# STM32F4xx:
#
# -mfloat-abi=hard -mfpu=fpv4-sp-d16: generate code for FPU and use
# corresponding version of (multi-)newlib. This way, we're ABI-compatible
# with most of the world, including Contiki.
#

ifeq ($(CHIP_FAMILY),STM32F2xx)
	LD_SCRIPT = STM32F207IG_FLASH.ld
	LD_SCRIPT_DIR = Project/TrueSTUDIO/STM322xG-EVAL
	CFLAGS += -mcpu=cortex-m3 -march=armv7-m
	CORE_ARCH = ARM_CM3
	PLL_FAMILY = f2
else ifeq ($(CHIP_FAMILY),STM32F4xx)
	LD_SCRIPT = STM32F407IG_FLASH.ld
	LD_SCRIPT_DIR = Project/TrueSTUDIO/STM324xG-EVAL
	STARTUP_S = startup_stm32f40xx.s	# naming exception
	CFLAGS += -mcpu=cortex-m4 -march=armv7e-m
	CFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16
	CORE_ARCH = ARM_CM4F
	PLL_FAMILY = f4
else
$(error Please set CHIP_FAMILY to STM32F2xx or STM32F4xx)
endif

CHIP_FAMILY_UC = $(shell echo $(CHIP_FAMILY) | tr a-z A-Z)
CHIP_FAMILY_LC = $(shell echo $(CHIP_FAMILY) | tr A-Z a-z)

STARTUP_S ?= startup_$(CHIP_FAMILY_LC).s
SYSTEM_C = system_$(CHIP_FAMILY_LC).c
CFLAGS += -DSTM32_CONF_H='"$(CHIP_FAMILY_LC)_conf.h"'
CFLAGS += -I$(DEMO_PATH)/Libraries/$(CHIP_FAMILY)_StdPeriph_Driver/inc
DRV_DIR = $(DEMO_PATH)/Libraries/$(CHIP_FAMILY)_StdPeriph_Driver/src
DRIVERS_C = $(DRIVERS:%=$(DRV_DIR)/$(CHIP_FAMILY_LC)_%.c) \

CFLAGS += -I$(FREERTOS)/FreeRTOS/Source/portable/GCC/$(CORE_ARCH)
SRC += $(FREERTOS)/FreeRTOS/Source/portable/GCC/$(CORE_ARCH)/port.c


#----- Definitions for the ST demo builder ------------------------------------


#
# STSW-STM32106STM32F2 and STM32F4 demonstration builder platform
# http://www.st.com/web/catalog/tools/FM147/CL1794/SC961/SS1743/PF258142
#

#
# Note that ST's ZIP seems to contain files we can't legally redistribute,
# even though few enough people seem to care about such details. Also note
# that ST only provide a file of the latest version, thus not allowing us
# to pin a known to be good version.
#

DEMO_DIR=STM32F2-F4_Demonstration_Builder_V1.3.0
DEMO_ZIP=stm32f2-f4_demobuild.zip
STM_DEMO=http://www.st.com/st-web-ui/static/active/en/st_prod_software_internet/resource/technical/software/firmware/$(DEMO_ZIP)


#----- Items we "import" ------------------------------------------------------


#
# Path from the platform build directories.
#
STM32_PATH=$(FREERTOS)/FreeRTOS/Demo/Shared/STM32
DEMO_PATH=$(STM32_PATH)/$(DEMO_DIR)

TEMPL=$(DEMO_PATH)/Libraries/CMSIS/Device/ST/$(CHIP_FAMILY)/Source/Templates/

PATH_STARTUP_S = $(TEMPL)/gcc_ride7/$(STARTUP_S)
PATH_SYSTEM_C = $(TEMPL)/$(SYSTEM_C)
PATH_LD_SCRIPT = $(DEMO_PATH)/$(LD_SCRIPT_DIR)/$(LD_SCRIPT)


#----- General build settings -------------------------------------------------


CFLAGS += -mthumb \
	-D$(CHIP_FAMILY_UC) \
	-DHSE_VALUE=$(CRYSTAL_Hz) \
	-I$(DEMO_PATH)/Project/Core/Devices/$(CHIP_FAMILY)\
	-I$(DEMO_PATH)/Libraries/$(CHIP_FAMILY)_StdPeriph_Driver/inc \
	-I$(DEMO_PATH)/Libraries/CMSIS/Device/ST/$(CHIP_FAMILY)/Include \
	-I$(DEMO_PATH)/Libraries/CMSIS/Include

LDFLAGS = -nostartfiles -T$(PATH_LD_SCRIPT) -Wl,--build-id=none

SRC += $(SYSTEM_C)

OBJS = $(SRC:.c=.o)

.PHONY:	all dfu clean spotless


#----- Verbosity control ------------------------------------------------------


CC_normal	:= $(CC)
CP_normal	:= cp
BUILD_normal	:=
DEPEND_normal	:= $(CPP) -MM -MG
MAKE_normal	:= $(MAKE)

CC_quiet	= @echo "  CC       " $@ && $(CC_normal)
CP_quiet	= @echo "  CP       " `echo "$<" | sed sX/.*/X/.../X` && \
		    $(CP_normal)
BUILD_quiet	= @echo "  BUILD    " $@ && $(BUILD_normal)
DEPEND_quiet	= @$(DEPEND_normal)
MAKE_quiet	= @echo "  MAKE     " $@ && $(MAKE_normal)

ifeq ($(V),1)
    CC		= $(CC_normal)
    CP		= $(CP_normal)
    BUILD	= $(BUILD_normal)
    DEPEND	= $(DEPEND_normal)
    MAKE	= +$(MAKE_normal)
else
    CC		= $(CC_quiet)
    CP		= $(CP_quiet)
    BUILD	= $(BUILD_quiet)
    DEPEND	= $(DEPEND_quiet)
    MAKE	= +$(MAKE_quiet)
endif


#----- Compilation ------------------------------------------------------------


all:		$(NAME).bin

$(NAME).bin:	$(NAME).elf
		$(BUILD) $(OBJCOPY) -O binary $< $@ || \
		    { rm -f $@; exit 1; }

#
# .SECONDEXPANSION enables deferred evaluation of OBJS, so that we can change
# it after including Makefile.stm32. That way, Makefile.stm32 can provide
# DEMOBUILDER (which is needed relatively early in the top-level Makefile) and
# still have valid OBJS for the rest.
#
# Note that other uses of OBJS, e.g., their $(DEMOBUILDER) dependency, do not
# need to be deferred, because Contiki doesn't depend on the demo builder.
#

.SECONDEXPANSION:
$(NAME).elf:	$$(OBJS) $(PATH_STARTUP_S) $(PATH_LD_SCRIPT) Makefile
		$(CC) $(CFLAGS) -o $@ $(OBJS) $(PATH_STARTUP_S) $(LDFLAGS)


#----- Generate system_stm32f*.c with correct PLL settings --------------------


.PHONY:		$(STM32_PATH)/pll

$(STM32_PATH)/pll:
		$(MAKE) -C $@

$(SYSTEM_C):	$(PATH_SYSTEM_C) $(STM32_PATH)/mksystem $(STM32_PATH)/pll
		$(BUILD) (cd $(STM32_PATH) && \
		    ./mksystem $(realpath $<) $(PLL_FAMILY) $(PLL_ARGS); ) \
		    >$@ || \
		    { rm -f $@; exit 1; }


#----- Download and unpack the ST demo builder --------------------------------


$(STM32_PATH)/$(DEMO_ZIP):
		wget -O $@ $(STM_DEMO) || { rm -f $@; exit 1; }

DEMOBUILDER = $(DEMO_PATH)/.unpacked

$(DEMOBUILDER):	$(STM32_PATH)/$(DEMO_ZIP)
		rm -rf `dirname $@`
		cd `dirname $<` && unzip `basename $<` || \
		    { rm -rf `dirname $@`; exit 1; }
		touch $@

$(OBJS) $(PATH_STARTUP_S) $(PATH_SYSTEM_C) $(PATH_LD_SCRIPT): $(DEMOBUILDER)


#----- Flash firmware with DFU ------------------------------------------------


dfu:		$(NAME).bin
		dfu-util -d 0483:df11 -a 0 -s 0x8000000 -D $<


#----- Dependencies ----------------------------------------------------------


MKDEP =	$(DEPEND) $(CFLAGS) $< |					\
	  sed 								\
	    -e 's|^$(basename $(notdir $<)).o:|$@:|'			\
	    -e '/^\(.*:\)\? */{p;s///;s/ *\\\?$$/ /;s/  */:\n/g;H;}'	\
	    -e '$${g;p;}'						\
	    -e d >$(basename $@).d;					\
	  [ "$${PIPESTATUS[*]}" = "0 0" ] ||				\
	  { rm -f $(basename $@).d; exit 1; }

%.o:            %.c
		$(CC) $(CFLAGS) -o $@ -c $<
		$(MKDEP)

-include $(OBJS:.o=.d)


#----- Cleanup ----------------------------------------------------------------


clean::
		rm -f $(OBJS) $(OBJS:.o=.d)
		rm -f $(NAME).elf $(NAME).bin $(SYSTEM_C)

spotless::	clean
		rm -rf $(DEMO_PATH)
		$(MAKE) -C pll spotless
		@echo "Consider to  rm -f $(STM32_PATH)/$(DEMO_ZIP)"
